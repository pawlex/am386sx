; The original 8086 only had 20 address lines which means they could only access
; up to 1MB of externaly mapped memory (ram&rom).  CPU used banking (segmentation) 
; to access beyond 2^16 bits (64K), which is why we have CS,DC,ES,FS,GS,SS registers.
;
; x86 CPU's start up in REAL MODE and the CPU does a strange but clever thing...
; Set *S register to 0xF000 (0x0F_xxxx)
; Set all address bits high except the last 4.  In this case, it's 24, so 0xFF_FFF0
; Fetch first instruction. **Normally this is nothing more than a jump-table.
;
; The implications here is the chipset designer must alias the 2 rom areas together for
; both reset fetch and execution from rom to work correctly, as the first non-relative 
; instruction will assume rom is mapped to the top 1MB of memory.


; 1KB (0x400) of boot rom.  0x0 - 0xC00
; 32K (0x8000) of sram. 0x0 - 0x7fff

;
%define START_LOCATION 0xFC00
%define SRAM_SEGMENT   0xF000
%define NULL_SELECTOR  0
%define DATA_SELECTOR  1<<3     ; flat data selector
%define CODE_SELECTOR  2<<3     ; 32-bit code selector
%define LONG_SELECTOR  3<<3     ; 64-bit code selector
;

use16
cpu 386
org START_LOCATION

START:          ; 0xFF_FC00 | 0x0F_FC00
    ;
    cli
    mov ax, SRAM_SEGMENT
    mov ds,ax
    mov ss,ax
    mov es,ax
    mov sp, 0x7FF0
    ;
    mov bx,GDTR - START_LOCATION
    lgdt [bx]	    ; load GDT register
    ;
    mov  eax,cr0    ; switch to protected mode
    or	 al,1
    mov  cr0,eax
    ;
    ; have to do it this way because flat assembler
    ; can't comprehend "jmp CODE_SELECTOR:pm_start"
    ; when we are org'ed high

    ;db	 0x66
    ;db	 0xEA
    ;dd	 PM_START
    ;dw	 CODE_SELECTOR
    
    
    ;
    align 0x10
PM_START:
    use32
    mov  eax,DATA_SELECTOR ; load 4 GB data descriptor
    mov  ds,ax             ; to all data segment registers
    mov  es,ax
    mov  ss,ax
    align 2
    jmp $
    ;
    ;
    ;
nops:
    ; align fills un-aligned area with nops ( 0x90 ).  Must be a power of 2.
    nop
    align 512
    nop
    align 256
    nop
    align 128
    nop
    align 64
GDTR:       ; Global Descriptor Table Register
    dw 4*8-1; limit of GDT (size minus one)
    dd GDT	; linear address of GDT
    ;
    align 16
    ;
GDT dw 0x0000,0x0000,0x0000,0x0000   ; mandatory first null desciptor
    dw 0xFFFF,0x0000,0x9200,0x008F   ; 4Gb flat data desciptor
    dw 0xFFFF,0x0000,0x9A00,0x00CF   ; 32-bit code desciptor
    dw 0xFFFF,0x0000,0x9A00,0x00AF   ; 64-bit code desciptor
    align 16
    ;nop
    ;align 32
    ;nop
    ;align 16
reset_vector:   ; 0xFF_FFF0 | 0xF0_FFF0
    jmp 0xF000:0xFC00
    align 16
